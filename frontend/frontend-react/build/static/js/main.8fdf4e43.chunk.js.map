{"version":3,"sources":["components/ModelTable.js","components/ModelController.js","components/InstanceTable.js","components/InstanceController.js","components/Landing.js","components/TestAPI.js","App.js","serviceWorker.js","index.js"],"names":["ModelTable","Object","keys","this","props","models","map","key","index","toUpperCase","model","vendor","model_number","height","display_color","ethernet_ports","power_ports","cpu","memory","storage","comment","id","renderTableHeader","renderTableData","Component","ModelController","state","axios","get","then","res","b","data","results","setState","InstanceTable","instances","instance","hostname","rack","rack_u","owner","InstanceController","console","log","Landing","App","Boolean","window","location","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8fdf4e43.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport '../stylesheets/TableView.css'\n\nexport class ModelTable extends Component {\n\n  renderTableHeader() {\n    let header = Object.keys(this.props.models[0])\n    return header.map((key, index) => {\n       return <th key={index}>{key.toUpperCase()}</th>\n    })\n  }\n\n  renderTableData() {\n    return this.props.models.map((model, index) => {\n       // TODO: get ID\n       const { vendor, model_number, height, display_color } = model //destructuring\n       const { ethernet_ports, power_ports, cpu, memory, storage, comment } = model //more destructuring\n       return (\n\n          // TODO: change this to ID\n          <tr key={height}>\n             <td>{vendor}</td>\n             <td>{model_number}</td>\n             <td>{height}</td>\n             <td>{display_color}</td>\n             <td>{ethernet_ports}</td>\n             <td>{power_ports}</td>\n             <td>{cpu}</td>\n             <td>{memory}</td>\n             <td>{storage}</td>\n             <td>{comment}</td>\n          </tr>\n       )\n    })\n   }\n \n  render() {\n    return (\n      <div>\n         <h1 id=\"title\">Models</h1>\n         <table id=\"entries\">\n            <tbody>\n               <tr>{this.renderTableHeader()}</tr>\n               { this.renderTableData() }\n            </tbody>\n         </table>\n      </div>\n   )\n  }\n}\n\nModelTable.propTypes = {\n  models: PropTypes.array.isRequired\n}\n\nexport default ModelTable\n","import React, { Component } from 'react'\nimport ModelTable from './ModelTable'\nimport axios from 'axios'\n\nexport class ModelController extends Component {\n  \n  // TODO: add ID\n  state = {\n    models: [\n      {\n        \"vendor\": \"Delasdfasdfl\",\n        \"model_number\": \"D2\",\n        \"height\": 2,\n        \"display_color\": \"Red\",\n        \"ethernet_ports\": 1,\n        \"power_ports\": 1,\n        \"cpu\": \"Intel CPU\",\n        \"memory\": 3,\n        \"storage\": \"Lots of Raid\",\n        \"comment\": \"First Model\"\n      }\n    ]\n  };\n\n  componentDidMount() {\n    axios.get('/api/models/').then(res => {\n      const b = res.data.results;\n      this.setState({ models: b });\n    });\n  }\n  \n  render() {\n    return <ModelTable models={ this.state.models } />\n  }\n}\n\nexport default ModelController\n\n// {\n//   id: 1,\n//   vendor: 'Dell',\n//   modelNumber: 'R710',\n//   height: 2,\n//   displayColor: 'black',\n//   ethernetPorts: 4,\n//   powerPorts: 1,\n//   cpu: 'Intel Xeon E5520 2.2Ghz',\n//   memory: 4,\n//   storage: '2x500GB SSD RAID1',\n//   comment: 'retired offering, no new purchasing'\n// },\n// {\n//   id: 2,\n//   vendor: 'Cisco',\n//   modelNumber: 'R720',\n//   height: 3,\n//   displayColor: 'red',\n//   ethernetPorts: 2,\n//   powerPorts: 2,\n//   cpu: 'Intel Xeon E5520 2.4Ghz',\n//   memory: 4,\n//   storage: '2x500GB SSD RAID2',\n//   comment: 'retired offering, no new purchasing !'\n// }","import React, { Component } from 'react'\nimport '../stylesheets/TableView.css'\nimport axios from 'axios'\n\nexport class InstanceTable extends Component {\n\n  renderTableHeader() {\n    let header = Object.keys(this.props.instances[0])\n    return header.map((key, index) => {\n        return <th key={index}>{key.toUpperCase()}</th>\n    })\n  }\n\n  renderTableData() {\n    return this.props.instances.map((instance, index) => {\n        // TODO: add id\n        const { model, hostname, rack, rack_u, owner, comment } = instance //destructuring\n        \n        return (\n          // TODO: use id\n          <tr key={rack_u}>\n              <td>{model}</td>\n              <td>{hostname}</td>\n              <td>{rack}</td>\n              <td>{rack_u}</td>\n              <td>{owner}</td>\n              <td>{comment}</td>\n          </tr>\n        )\n    })\n  }\n\n  render() {\n    return (\n        <div>\n        <h1 id=\"title\">Instances</h1>\n          <table id=\"entries\">\n              <tbody>\n                <tr>{this.renderTableHeader()}</tr>\n                { this.renderTableData() }\n              </tbody>\n          </table>\n        </div>\n    )\n  }\n}\n\nexport default InstanceTable\n","import React, { Component } from 'react'\nimport InstanceTable from './InstanceTable'\nimport axios from 'axios'\n\nexport class InstanceController extends Component {\n\n  constructor() {\n    super();\n    \n    // add ID\n    this.state = {\n      instances: [\n        {\n          model: 'R710',\n          hostname: 'server9',\n          rack: 'B12',\n          rack_u: 5,\n          owner: 'Michael',\n          comment: 'Reserved for Palaemon project'\n        }\n      ],\n\n    }\n  }\n\n  componentDidMount() {\n    axios.get('/api/instances/').then(res => {\n      const b = res.data.results;\n      console.log(b);\n      this.setState({ instances: b });\n    });\n  }\n\n\n  render() {\n    return <InstanceTable instances={this.state.instances} />\n  }\n}\n\nexport default InstanceController\n","import React, { Component } from 'react'\nimport ModelController from './ModelController'\nimport InstanceController from './InstanceController'\nimport TestAPI from './TestAPI'\n\n\nexport class Landing extends Component {\n  render() {\n    return (\n      <div>\n        <h1>This is a dummy landing page!</h1>\n        <br></br>\n        <ModelController /> \n        <br></br>\n        {/* <TestAPI /> */}\n        <InstanceController />\n      </div>\n    )\n  }\n}\n\nexport default Landing\n","import React, { Component } from 'react'\nimport axios from 'axios';\n\nexport class TestAPI extends Component {\n\n  componentDidMount() {\n    axios.get('/api/models/').then(res => {\n      console.log(res);\n      console.log('df')\n    });\n  }\n\n\n  render() {\n    return (\n      <div>\n        <h1>testing API here</h1>\n\n\n\n\n      </div>\n    )\n  }\n}\n\nexport default TestAPI\n","import React from 'react';\nimport './App.css';\nimport Landing from './components/Landing'\n\nfunction App() {\n  return (\n    <Landing />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}